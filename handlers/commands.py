import json
from datetime import date
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import QUESTION, OPTIONS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /poll —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å.")

async def poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(opt, callback_data=f"opt_{i}")]
        for i, opt in enumerate(OPTIONS)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(QUESTION, reply_markup=reply_markup)

async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = date.today().isoformat()

    try:
        with open("responses.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return

    responses = data.get(today)
    if not responses:
        await update.message.reply_text("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return

    lines = [f"üìä –û—Ç–≤–µ—Ç—ã –∑–∞ {today}:\n"]
    for r in responses:
        name = r.get("full_name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        group_name = r.get("group_name", "–Ω–∏–∫–Ω–µ–π–º –Ω–µ –∑–∞–¥–∞–Ω")
        link = r.get("link", "")
        answer = r.get("answer", "?")
        time = r.get("timestamp", "–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        lines.append(
            f"üë§ {name} ({group_name})\nüîó {link}\nüí¨ {answer}\nüïì {time}\n"
        )

    lines.append(f"\n–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(responses)}")
    await update.message.reply_text("\n".join(lines))

